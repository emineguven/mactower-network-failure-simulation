#start <-  strptime("09/10/08 14:00", "%d/%m/%y %H:%M")
end <-  strptime("10/12/15 14:00", "%d/%m/%y %H:%M")
(end-start)/7 #weeks
60E3
60E3*0.05
30E3*0.05
30E3*0.01
?solve
example(solve)
x = 1:10
y <<- x
y
x
y = 1
x
makeVector = function( x = numeric()){
m = NULL
set = function(y) {
x <<- y
m <<- NULL
}
get <- function()x
setmean <- function(mean) m <<- mean
getmean <- function() m
list( set = set, get=get,
setmean = setmean,
getmean=getmean)
}
makeVecotr
makeVector
makeVector()
makeVector(1:10)
makeVector()
makeVector(2:20)
makeVector(x=2:20)
y = makeVector( 2:20)
y
str(y)
y$set()
y$set(x)
str(y)
N=1E6
genotype_elements = c(-1,0,1)
error = rnorm(N)
tb = data.frame(error)
tb$g1 = sample(genotype_elements, N, replace=T)
h2 = 1E-5
tb$phynotype = sqrt(h2)*tb$g1 + sqrt(1-h2)*tb$error
summary(lm(tb$phynotype ~ tb$g1))
N=5E6
genotype_elements = c(-1,0,1)
error = rnorm(N)
tb = data.frame(error)
tb$g1 = sample(genotype_elements, N, replace=T)
h2 = 1E-5
tb$phynotype = sqrt(h2)*tb$g1 + sqrt(1-h2)*tb$error
summary(lm(tb$phynotype ~ tb$g1))
N=1E6
genotype_elements = c(-1,0,1)
error = rnorm(N)
tb = data.frame(error)
tb$g1 = sample(genotype_elements, N, replace=T)
h2 = 1E-5
tb$phynotype = sqrt(h2)*tb$g1 + sqrt(1-h2)*tb$error
summary(lm(tb$phynotype ~ tb$g1))
set.seed(2015)
N=1E6
genotype_elements = c(-1,0,1)
error = rnorm(N)
tb = data.frame(error)
tb$g1 = sample(genotype_elements, N, replace=T)
h2 = 1E-5
tb$phynotype = sqrt(h2)*tb$g1 + sqrt(1-h2)*tb$error
summary(lm(tb$phynotype ~ tb$g1))
set.seed(2015)
N=1E6
genotype_elements = c(-1,0,1)
error = rnorm(N)
tb = data.frame(error)
tb$g1 = sample(genotype_elements, N, replace=T)
h2 = 1E-5
tb$phynotype = sqrt(h2)*tb$g1 + sqrt(1-h2)*tb$error
summary(lm(tb$phynotype ~ tb$g1))
set.seed(2015)
N=5E5
genotype_elements = c(-1,0,1)
error = rnorm(N)
tb = data.frame(error)
tb$g1 = sample(genotype_elements, N, replace=T)
h2 = 1E-5
tb$phynotype = sqrt(h2)*tb$g1 + sqrt(1-h2)*tb$error
summary(lm(tb$phynotype ~ tb$g1))
set.seed(2015)
N=1E5
genotype_elements = c(-1,0,1)
error = rnorm(N)
tb = data.frame(error)
tb$g1 = sample(genotype_elements, N, replace=T)
h2 = 1E-5
tb$phynotype = sqrt(h2)*tb$g1 + sqrt(1-h2)*tb$error
summary(lm(tb$phynotype ~ tb$g1))
# Cancer mutation: A simple simulation exercise for BIO125
Basic parameters
```{r}
CellTypes = c(0,1,2)
```
*CellTypes*: 0 for wildtype, 1 for mutant, and 2 for cancer cells.
```{r}
TotalCells = 1E3
```
*TotalCells* means the number of cells, including wildtype, mutant, and cancer cells.
```{r}
CurrentCells = seq(0, TotalCells)
```
*CurrentCells* represent the current number and type of cells.
```{r}
Generations = c(1E3, 1E4, 1E5, 1E6, 1E7, 1E8)
```
*Generations* represent how many times cells with replicate.
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
list.files(path=outputdir )
install.packages("GetoptLong")
?grep
inputdir = 'net1'; inputprefix = 'net1'
grep
myfiles = list.files(inputdir, pattern = 'csv')
myfiles = grep(inputprefix, myfiles)
myfiles = list.files(inputdir, pattern = 'csv')
myfiles
myfiles = list.files(inputdir)
inputdir
setwd("~/Dropbox/courses.student.research.dp/bio386.2015Fall/homework-quiz-exams/fall,2015/midterm,2015Fall_key/4.scores")
setwd("~/github/mactower-network-failure-simulation/1.grid.network.2015Oct")
# inputdir = 'net1'; inputprefix = 'net1'; i = 1
myfiles = list.files(inputdir)
list.files(inputdir)
myfiles = grep(inputprefix, myfiles)
myfiles
myfiles = myfiles[ grep(inputprefix, myfiles) ]
rm(list=ls())
library(GetoptLong)
inputdir = 'net1'; inputprefix = 'net1'; i = 1
myfiles = list.files(inputdir)
myfiles = myfiles[ grep(inputprefix, myfiles) ]
currentFile = paste( inputdir, '/', myfiles[i], sep='');
tb = read.csv(currentFile)
View(tb)
outtb = data.frame(myfiles)
outtb$mean = NA;
outtb = data.frame(myfiles)
outtb$mean = NA;
for( i in 1:length(myfiles)) {
currentFile = paste( inputdir, '/', myfiles[i], sep='');
tb = read.csv(currentFile)
outb$mean[i] = mean(tb[,1])
}
outtb = data.frame(myfiles)
outtb$mean = NA;
for( i in 1:length(myfiles)) {
currentFile = paste( inputdir, '/', myfiles[i], sep='');
tb = read.csv(currentFile)
outtb$mean[i] = mean(tb[,1])
}
View(outtb)
outtb = summarize_mean_from_files( myfiles )
summarize_mean_from_files = function(myfiles){
outtb = data.frame(myfiles)
outtb$mean = NA;
for( i in 1:length(myfiles)) {
currentFile = paste( inputdir, '/', myfiles[i], sep='');
tb = read.csv(currentFile)
outtb$mean[i] = mean(tb[,1])
}
outtb;
}
outtb = summarize_mean_from_files( myfiles )
View(outtb)
out = summarize_mean_from_files( myfiles )
View(out)
out = summarize_mean_from_files( myfiles )
timestamp = format(Sys.time(), "%Y%b%d_%H%M%S")
outputFile=paste(inputdir, "summary","csv", sep="." )
write.csv( out, outputFile, row.names=F)
out = summarize_mean_from_files( myfiles )
#timestamp = format(Sys.time(), "%Y%b%d_%H%M%S")
write.csv( out, outputFile, row.names=F)
inputdir = 'net1'; inputprefix = 'net1'; i = 1
myfiles = list.files(inputdir)
myfiles = myfiles[ grep(inputprefix, myfiles) ]
out = summarize_mean_from_files( myfiles, inputdir )
rm(list=ls())
library(GetoptLong)
source('network.r')
inputdir = 'net1'; inputprefix = 'net1'; i = 1
myfiles = list.files(inputdir)
myfiles = myfiles[ grep(inputprefix, myfiles) ]
out = summarize_mean_from_files( myfiles, inputdir )
View(out)
rm(list=ls())
source('network.r')
View(summarize_mean_from_files)
summarize_mean_from_files = function(myfiles, inputdir){
#calcualte means of networking aging data in a vector of files
myfiles = myfiles; inputdir = inputdir;
print (myfiles)
outtb = data.frame(myfiles)
outtb$mean = NA;
for( i in 1:length(myfiles)) {
currentFile = paste( inputdir, '/', myfiles[i], sep='');
tb = read.csv(currentFile)
outtb$mean[i] = mean(tb[,1])
}
outtb;
}
inputdir = 'net1'; inputprefix = 'net1'; i = 1
out = summarize_mean_from_files( myfiles, inputdir )
View(summarize_mean_from_files)
summarize_mean_from_files = function(infiles, inputdir){
#calcualte means of networking aging data in a vector of files
myfiles = infiles; inputdir = inputdir;
print (myfiles)
outtb = data.frame(myfiles)
outtb$mean = NA;
for( i in 1:length(myfiles)) {
currentFile = paste( inputdir, '/', myfiles[i], sep='');
tb = read.csv(currentFile)
outtb$mean[i] = mean(tb[,1])
}
outtb;
}
myfiles = list.files(inputdir)
myfiles = myfiles[ grep(inputprefix, myfiles) ]
out = summarize_mean_from_files( myfiles, inputdir )
View(single_network_failure_v2)
rm(list=ls())
source( 'network.r' )
popSize = 100;
outputdir = getwd();
outputprefix = '';
degreeThreshold = 5;
debug = 0;
inNetworkFile = 'net1/Degree4N1000_network.csv'
lambda1 = 0.002
lambda2 = lambda1/10
inNetworkFile = 'net1/Degree4N1000_network.csv'
inLookupTbFile = 'net1/net1/Degree4N1000_EssenLookupTb.csv'
lambda1 = 0.002
lambda2 = lambda1/10
p=1.0
list.files(path=outputdir )
essenLookupTb = read.csv(inNetworkFile);
essenLookupTb = essenLookupTb[,1];
pairs = read.csv(inNetworkFile);
View(pairs)
View(pairs)
inpairs = pairs[,1:2] #bookkeeping
names(inpairs) = c('No1','No2')
degreeTb = data.frame( table(c(inpairs$No1, inpairs$No2)))
names(degreeTb) = c("No", "degree")
degreeTb$moduleAge = NA;
View(degreeTb)
i=1
essenLookupTb[ degreeTb$No[i] ]
essenLookupTb[ degreeTb$No[i] ] != 0
if ( essenLookupTb[ degreeTb$No[i] ] != 0) { #essential node
lambda = ifelse( degreeTb$degree[i] >= threshold, lambda1, lambda2)
age = rexp( degreeTb$degree[i], rate=lambda ) #exponential age
if(degreeTb$degree[i] >= threshold){
active = runif(degreeTb$degree[i])  #uniform interaction stochasticity
active = ifelse( active<=p, 1, NA  ) #pick active interactions
if( sum(active, na.rm=T) > 0 ){ #there should be at least 1 active intxn
age = age * active # only active interactions for modular age estimation
degreeTb$moduleAge[i] = max(age, na.rm=T) #maximum intxn age is the module age
} else {# when no active intxn is available
degreeTb$moduleAge[i] = 0; #this module is born dead.
}
} else { # for degree < threshold, no stochasticity is applied.
degreeTb$moduleAge[i] = max(age, na.rm=T) #maximum intxn age is the module age
}
} else {# non-essential node
degreeTb$moduleAge[i] = NA
}
threshold = 5
if ( essenLookupTb[ degreeTb$No[i] ] != 0) { #essential node
lambda = ifelse( degreeTb$degree[i] >= threshold, lambda1, lambda2)
age = rexp( degreeTb$degree[i], rate=lambda ) #exponential age
if(degreeTb$degree[i] >= threshold){
active = runif(degreeTb$degree[i])  #uniform interaction stochasticity
active = ifelse( active<=p, 1, NA  ) #pick active interactions
if( sum(active, na.rm=T) > 0 ){ #there should be at least 1 active intxn
age = age * active # only active interactions for modular age estimation
degreeTb$moduleAge[i] = max(age, na.rm=T) #maximum intxn age is the module age
} else {# when no active intxn is available
degreeTb$moduleAge[i] = 0; #this module is born dead.
}
} else { # for degree < threshold, no stochasticity is applied.
degreeTb$moduleAge[i] = max(age, na.rm=T) #maximum intxn age is the module age
}
} else {# non-essential node
degreeTb$moduleAge[i] = NA
}
View(degreeTb)
essenLookupTb[ degreeTb$No[i] ] != 0
essenLookupTb[ degreeTb$No[i] ]
essenLookupTb
essenLookupTb = read.csv(inLookupTbFile);
essenLookupTb = essenLookupTb[,1];
inLookupTbFile
inNetworkFile = 'net1/Degree4N1000_network.csv'
inLookupTbFile = 'net1/Degree4N1000_EssenLookupTb.csv'
essenLookupTb = read.csv(inLookupTbFile);
essenLookupTb = essenLookupTb[,1];
pairs = read.csv(inNetworkFile);
names(pairs) = c("No1", "No2")
essenLookupTb = read.csv(inLookupTbFile);
View(essenLookupTb)
essenLookupTb = read.csv(inLookupTbFile, row.names=1);
View(essenLookupTb)
str(essenLookupTb)
pairs = read.csv(inNetworkFile);
pairs$No1
essenLookupTb[pairs$No1]
essenLookupTb
essenLookupTb[pairs$No1,1]
essenLookupTb = read.csv(inLookupTbFile, row.names=1);
essenLookupTb = as.vector(essenLookupTb[,1]);
#2014 April 9, Hong Qin hqin@spelman.edu
#todo current simulation does not consider essen-essen interaction
#2015 Fall
summarize_mean_from_files = function(infiles, inputdir){
debug = 0;
#calcualte means of networking aging data in a vector of files
myfiles = infiles; inputdir = inputdir;
if( debug) { print (myfiles)};
outtb = data.frame(myfiles)
outtb$mean = NA;
for( i in 1:length(myfiles)) {
currentFile = paste( inputdir, '/', myfiles[i], sep='');
tb = read.csv(currentFile)
outtb$mean[i] = mean(tb[,1])
}
outtb;
}
single_network_failure_v2 = function(lambda1, lambda2=lambda1/10, threshold=4, p, pairs, essenLookupTb ) {
# single network failure simulation, 20151013Tue
# lambda1: First exponential constant failure rate for edges with degree >= threshold
# lambda2: Second exponential constant failure rate for edges with degree < threshold
# threshold: degree threshold for lambda1 and lambda2
# pairs: network in pairwide format, using numeric NOs 20151013
# essenLookupTb: lookup table for essential and nonessential genes, numeric values
## for debug:   lambda1 = 1/50; lambda2= lambda1/10; threshold=4; p=0.8
inpairs = pairs[,1:2] #bookkeeping
names(inpairs) = c('No1','No2')
#get connectivities per node
degreeTb = data.frame( table(c(inpairs$No1, inpairs$No2)))
names(degreeTb) = c("No", "degree")
degreeTb$moduleAge = NA;
for( i in 1:length(degreeTb[,1])){
if ( essenLookupTb[ degreeTb$No[i] ] != 0) { #essential node
lambda = ifelse( degreeTb$degree[i] >= threshold, lambda1, lambda2)
age = rexp( degreeTb$degree[i], rate=lambda ) #exponential age
if(degreeTb$degree[i] >= threshold){
active = runif(degreeTb$degree[i])  #uniform interaction stochasticity
active = ifelse( active<=p, 1, NA  ) #pick active interactions
if( sum(active, na.rm=T) > 0 ){ #there should be at least 1 active intxn
age = age * active # only active interactions for modular age estimation
degreeTb$moduleAge[i] = max(age, na.rm=T) #maximum intxn age is the module age
} else {# when no active intxn is available
degreeTb$moduleAge[i] = 0; #this module is born dead.
}
} else { # for degree < threshold, no stochasticity is applied.
degreeTb$moduleAge[i] = max(age, na.rm=T) #maximum intxn age is the module age
}
} else {# non-essential node
degreeTb$moduleAge[i] = NA
}
}
summary(degreeTb)
currentNetworkAge = min(degreeTb$moduleAge, na.rm=T)
}
#20140408 old ms02_singlerun() did not check id1-id2 versus id2-id1.
# So, I wrote v2 and wrapp the old function to v2 function call.
#permute.pairs.wo.selfpairs = function( inpairs,  ncycles=10, debug=1 ) {
ms02_singlerun = function( inpairs,  ncycles=10, indebug=0 ) { # Renamed, 2014 Feb 12
return( ms02_singlerun_v2( inpairs,  ncycles=ncycles, indebug=indebug ))
}
ms02_singlerun_v2 = function( inpairs,  ncycles=10, indebug=0 ) {
if (ncycles >= 1 ) {
if(indebug>0) {
print(paste('ncycles=', ncycles))
}
longids = c(as.character(inpairs[,1]), as.character(inpairs[,2]) )
longids = sample(longids)
len = length(inpairs[,1])
newpairs2 = data.frame( cbind( longids[1:len], longids[(len+1): (2*len)]) )
newpairs2 = t(apply(newpairs2, 1, sort))
newpairs2 = data.frame(newpairs2)
names(newpairs2) = c('id1', 'id2')
newpairs2$id1 = as.character( newpairs2$id1)
newpairs2$id2 = as.character( newpairs2$id2)
newpairs2$tag =  paste(newpairs2[,1], newpairs2[,2], sep="_")
counts = table( newpairs2$tag )
newpairs2$tag_counts = counts[newpairs2$tag]
newpairs2$selfpairs = ifelse( newpairs2$id1 == newpairs2$id2, 1, 0 )
redo.tb = newpairs2[ newpairs2$selfpairs==1 | newpairs2$tag_counts>1, ]
rest.tb = newpairs2[ newpairs2$selfpairs==0 & newpairs2$tag_counts==1, ]
if(indebug>0) {
print(paste("===redopairs===="),NULL);      print(redo.tb);
#print(paste("===restpairs===="),NULL);      print(rest.tb);
print(paste("================="),NULL)
}
if( length(redo.tb[,1])>=1 ) {
if ( ncycles == 0) {
#return (c(NA,NA, NA) );
print(paste("ncycles reached zero, ncycles"),ncycles)
print(paste("Abort!"),NULL)
stop;
} else {
ncycles = ncycles - 1
splitPos = round( length(redo.tb[,1]) * sqrt(ncycles) ) + 5
splitPos = min( splitPos, (length(rest.tb[,1])-1 ) )
selectedpairs = rbind(redo.tb,  rest.tb[1: splitPos, ] )   #20140408, potential bug. always take initial section
unchangedpairs = rest.tb[ (splitPos + 1): length(rest.tb[,1]), ] #20140408, potential bug.
return( rbind(unchangedpairs, ms02_singlerun_v2(selectedpairs, ncycles)))  #2014 Feb 12
}
} else {
return (newpairs2 )
}
} else {
return( c(NA,NA,NA ))
}
}#end of ms02 v2
single_network_failure = function(lambda, p, pairs, runningORFs) {
# single network failure simulation
# lambda: exponential constant failure rate for edges
# pairs: network in pairwide format
# runningORFs: GooddEssentialORFsPPI
inpairs = pairs[,1:2] #bookkeeping
names(inpairs) = c('id1','id2')
#stochasticity into pairs
inpairs$active = runif(length(inpairs[,1]))  #uniform
# tmp = pairs$active > 1-p
# table(tmp) / length(tmp)  ; #double-check, very good.
inpairs$age = rexp( length(inpairs[,1]), rate=lambda )  #exponential ages for pairs
inpairs$age = ifelse(inpairs$active > (1-p), inpairs$age, NA ) #if not active, intxn is excluded.
#pairs$age = ifelse(pairs$active > (1-p), pairs$age, 0 )  # in what situations, can non-ative intxn be treat as 0-age?
ModuleTb = data.frame(runningORFs) #buffer for module ages
#loop every essential genes to identify the module age
for (i in 1:length(runningORFs)) {
myORF = runningORFs[i]
pos1 = grep(myORF, inpairs$id1)
pos2 = grep(myORF, inpairs$id2)  #id1,2 to ORF1,2 is a really bad choice.
if( length( c(pos1,pos2))>=1 ) {
ModuleTb$age.m[i] = max( inpairs$age[c(pos1,pos2)], na.rm=T )   #maximal intxn age -> module age
} else {
ModuleTb$age.m[i] = NA;
}
}
#head(ModuleTb);
summary(ModuleTb)
ModuleTb$age.m[ ModuleTb$age.m== -Inf] = 0; #dead births occur when links are not active
currentNetworkAge = min(ModuleTb$age.m)
}
1/350
1/0.005
source('network.r')
View(summarize_mean_from_files)
source('lifespan.r')
View(calculate.s)
inputdir = getwd();
inputdir = 'net1'
inputprefix = 'net1'
inputprefix = 'net1'
outputFile = "_tmp_networkaging_summary.csv";
outputplotFile = "_tmp_networkaging_plot.pdf";
outputFile = "_tmp_networkaging_summary.csv";
outputplotFile = "_tmp_networkaging_plot.pdf";
debug = 0;
# inputdir = 'net1'; inputprefix = 'net1'; i = 1
myfiles = list.files(inputdir)
myfiles = myfiles[ grep(inputprefix, myfiles) ]
out = summarize_mean_from_files( myfiles, inputdir )
#timestamp = format(Sys.time(), "%Y%b%d_%H%M%S")
write.csv( out, outputFile, row.names=F)
source('lifespan.r')
pdf("outputplotFile")
for( i in 1:length(myfiles)) {
currentFile = paste( inputdir, '/', myfiles[i], sep='');
tb = read.csv(currentFile)
st = calculate.s( tb[,1])
plot( st$s ~ st$t, title = currentFile)
}
dev.off()
warnings()
for( i in 1:length(myfiles)) {
currentFile = paste( inputdir, '/', myfiles[i], sep='');
tb = read.csv(currentFile)
st = calculate.s( tb[,1])
plot( st$s ~ st$t, main = currentFile)
}
source('lifespan.r')
View(calculate.mortality.rate)
tb = calculate.mortality.rate(tbLS[,1])
tbLS = read.csv(currentFile)
tb = calculate.mortality.rate(tbLS[,1])
plot( tb$s ~ tb$t, main = currentFile)
dev.off()
plot( tb$s ~ tb$t, main = currentFile)
plot( tb$mortality.rate ~ tb$t,  main = currentFile )
plot( tb$mortality.rate ~ tb$t, log='y', main=paste('linear for Gompertz',currentFile ))
plot( tb$mortality.rate ~ tb$t, log='yx', main='linear for Weibull' )
