require(flexsurv)
setwd("~/github/mactower-network-failure-simulation/mathramp")
source("lifespan.r")
getwd()
list.files()
origAgeFiles = list.files(path="original_ginppit_failures")
origAgeFiles
list.files(path="ms02.gindip.failures/2/popages")
ms02AgeFiles = list.files(path='ms02.gindip.failures/1/popages', pattern='lambda.0.04')
ms02AgeFiles = list.files(path='ms02.gindip.failures/1/popages', pattern='2000')
ms02AgeFiles
origAgeFiles = list.files(path="original_ginppit_failures")
origAgeFiles
tb.ori = read.csv("original_ginppit_failures/cutoff.4.p.0.9.lambda.0.04.popsize.10000.time.2014Mar16_091252.txt")
tb.ms02 = read.csv("ms02.gindip.failures/1/popages/cutoff.4.p.0.9.lambda.0.04.popsize.500.time.2014Feb27_205447.txt")
summary(tb.ori)
summary(tb.ms02)
s.ori = calculate.s(tb.ori[,1])
s.ms02 = calculate.s(tb.ms02[,1])
ks.test( tb.ori[,1], tb.ms02[,1])
wilcox.test( tb.ori[,1], c(tb.ms02[,1],tb.ms02[,1], tb.ms02[,1], tb.ms02[,1]))
plot( s.ori$s ~ s.ori$t, type='l',col='blue' )
lines( s.ms02$s ~ s.ms02$t, col='red')
plot( s.ori$s ~ s.ori$t, type='l',col='blue', log='x' )
lines( s.ms02$s ~ s.ms02$t, col='red')
ori.gomp = flexsurvreg(formula = Surv(tb.ori[,1]) ~ 1, dist = 'gompertz') ### Use the flexsurvreg package to fit lifespan data to gompertz or weibull distribution
require(flexsurv)
install.packages("flexsurv")
tb.ori = read.csv("original_ginppit_failures/cutoff.4.p.0.9.lambda.0.04.popsize.10000.time.2014Mar16_091252.txt")
tb.ms02 = read.csv("ms02.gindip.failures/1/popages/cutoff.4.p.0.9.lambda.0.04.popsize.500.time.2014Feb27_205447.txt")
summary(tb.ori)
summary(tb.ms02)
s.ori = calculate.s(tb.ori[,1])
s.ms02 = calculate.s(tb.ms02[,1])
ks.test( tb.ori[,1], tb.ms02[,1])
wilcox.test( tb.ori[,1], c(tb.ms02[,1],tb.ms02[,1], tb.ms02[,1], tb.ms02[,1]))
plot( s.ori$s ~ s.ori$t, type='l',col='blue' )
lines( s.ms02$s ~ s.ms02$t, col='red')
plot( s.ori$s ~ s.ori$t, type='l',col='blue', log='x' )
lines( s.ms02$s ~ s.ms02$t, col='red')
ori.gomp = flexsurvreg(formula = Surv(tb.ori[,1]) ~ 1, dist = 'gompertz') ### Use the flexsurvreg package to fit lifespan data to gompertz or weibull distribution
require(flexsurv)
ori.gomp = flexsurvreg(formula = Surv(tb.ori[,1]) ~ 1, dist = 'gompertz') ### Use the flexsurvreg package to fit lifespan data to gompertz or weibull distribution
ms02.gomp = flexsurvreg(formula = Surv(tb.ms02[,1]) ~ 1, dist = 'gompertz') ### Use the flexsurvreg package to fit lifespan data to gompertz or weibull distribution
c(ori.gomp$AIC, ms02.gomp$AIC)
ori.gomp = flexsurvreg(formula = Surv(tb.ori[1:500,1]) ~ 1, dist = 'gompertz') ### Use the flexsurvreg package to fit lifespan data to gompertz or weibull distribution
ms02.gomp = flexsurvreg(formula = Surv(tb.ms02[1:500,1]) ~ 1, dist = 'gompertz') ### Use the flexsurvreg package to fit lifespan data to gompertz or weibull distribution
c(ori.gomp$AIC, ms02.gomp$AIC)
ori.gomp = flexsurvreg(formula = Surv(tb.ori[1:500,1]) ~ 1, dist = 'gompertz') ### Use the flexsurvreg package to fit lifespan data to gompertz or weibull distribution
ms02.gomp = flexsurvreg(formula = Surv(tb.ms02[1:500,1]) ~ 1, dist = 'gompertz') ### Use the flexsurvreg package to fit lifespan data to gompertz or weibull distribution
ori.weibull = flexsurvreg(formula = Surv(tb.ori[1:500,1]) ~ 1, dist = 'weibull') ### Use the flexsurvreg package to fit lifespan data to gompertz or weibull distribution
ms02.weibull = flexsurvreg(formula = Surv(tb.ms02[1:500,1]) ~ 1, dist = 'weibull') ### Use the flexsurvreg package to fit lifespan data to gompertz or weibull distribution
c(ori.gomp$AIC, ms02.gomp$AIC, ori.weibull$AIC, ms02.weibull$AIC)
lifespan = tb.ori[,1]
tb = calculate.s(lifespan)
head(tb)
tb$ds=NA; tb$dt=NA
tb$dt[1] = tb$s[1]
tb$ds[1] = 1 - tb$s[1]
tb$mortality.rate[1] = tb$ds[1] / tb$dt[1]
for( j in 2:length(tb[,1])) {
tb$ds[j] =  tb$s[j-1] - tb$s[j]
tb$dt[j] = -tb$t[j-1] + tb$t[j]
tb$mortality.rate[j] = tb$ds[j] / ( tb$s[j] * tb$dt[j])
}
plot( tb$s ~ tb$t)
plot( tb$mortality.rate ~ tb$t, typ='l' )
summary(tb.ori[,1])
lifespan = round( tb.ori[,1], digits=1)
head(lifespan)
table(lifespan)
tb = calculate.s(lifespan)
head(tb)
tb$ds=NA; tb$dt=NA
tb$dt[1] = tb$s[1]
tb$ds[1] = 1 - tb$s[1]
tb$mortality.rate[1] = tb$ds[1] / tb$dt[1]
for( j in 2:length(tb[,1])) {
tb$ds[j] =  tb$s[j-1] - tb$s[j]
tb$dt[j] = -tb$t[j-1] + tb$t[j]
tb$mortality.rate[j] = tb$ds[j] / ( tb$s[j] * tb$dt[j])
}
plot( tb$s ~ tb$t)
plot( tb$mortality.rate ~ tb$t, typ='l' )
plot( log10(tb$mortality.rate) ~ tb$t, type='p') #linear for Gompertz, semi-log plot
plot( log10(tb$mortality.rate) ~ log10(tb$t), type='p'  ) #linear for Weibull, log-log plot
tb.ori = read.csv("original_ginppit_failures/cutoff.4.p.0.7.lambda.0.04.popsize.10000.time.2014Mar11_233122.txt")
tb.ms02 = read.csv("ms02.gindip.failures/1/popages/cutoff.4.p.0.7.lambda.0.04.popsize.500.time.2014Feb27_153343.txt")
summary(tb.ori)
summary(tb.ms02)
s.ori = calculate.s(tb.ori[,1])
s.ms02 = calculate.s(tb.ms02[,1])
ks.test( tb.ori[,1], tb.ms02[,1])
wilcox.test( tb.ori[,1], c(tb.ms02[,1],tb.ms02[,1], tb.ms02[,1], tb.ms02[,1]))
#First, plot of original network survival curve
plot( s.ori$s ~ s.ori$t, type='l',col='blue' )
lines( s.ms02$s ~ s.ms02$t, col='red')
plot( s.ori$s ~ s.ori$t, type='l',col='blue', log='x' )
lines( s.ms02$s ~ s.ms02$t, col='red')
#fitting Gompertz and Weibull
ori.gomp = flexsurvreg(formula = Surv(tb.ori[1:500,1]) ~ 1, dist = 'gompertz') ### Use the flexsurvreg package to fit lifespan data to gompertz or weibull distribution
ms02.gomp = flexsurvreg(formula = Surv(tb.ms02[1:500,1]) ~ 1, dist = 'gompertz') ### Use the flexsurvreg package to fit lifespan data to gompertz or weibull distribution
ori.weibull = flexsurvreg(formula = Surv(tb.ori[1:500,1]) ~ 1, dist = 'weibull') ### Use the flexsurvreg package to fit lifespan data to gompertz or weibull distribution
ms02.weibull = flexsurvreg(formula = Surv(tb.ms02[1:500,1]) ~ 1, dist = 'weibull') ### Use the flexsurvreg package to fit lifespan data to gompertz or weibull distribution
c(ori.gomp$AIC, ms02.gomp$AIC, ori.weibull$AIC, ms02.weibull$AIC)
lifespan = round( tb.ori[,1], digits=1)
table(lifespan)
tb = calculate.s(lifespan)
head(tb)
tb$ds=NA; tb$dt=NA
tb$dt[1] = tb$s[1]
tb$ds[1] = 1 - tb$s[1]
tb$mortality.rate[1] = tb$ds[1] / tb$dt[1]
for( j in 2:length(tb[,1])) {
tb$ds[j] =  tb$s[j-1] - tb$s[j]
tb$dt[j] = -tb$t[j-1] + tb$t[j]
tb$mortality.rate[j] = tb$ds[j] / ( tb$s[j] * tb$dt[j])
}
plot( tb$s ~ tb$t)
plot( tb$mortality.rate ~ tb$t, typ='l' )
plot( log10(tb$mortality.rate) ~ tb$t, type='p') #linear for Gompertz, semi-log plot
plot( log10(tb$mortality.rate) ~ log10(tb$t), type='p'  ) #linear for Weibull, log-log plot
plot( log10(tb$mortality.rate) ~ tb$t, type='p') #linear for Gompertz, semi-log plot
rm(list=ls())
require(flexsurv)
setwd("~/github/mactower-network-failure-simulation/mathramp")
source("lifespan.r")
getwd()
list.files()
origAgeFiles = list.files(path="original_ginppit_failures")
origAgeFiles
list.files(path="ms02.gindip.failures/1/popages")
list.files(path="ms02.gindip.failures/1/popages", pattern='2000')
origAgeFiles
origAgeFiles = list.files(path="original_ginppit_failures2")
origAgeFiles
ms02AgeFiles
list.files(path="ms02.gindip.failures/1/popages", pattern='2000')
ms02AgeFiles = list.files(path='ms02.gindip.failures/1/popages', pattern='2000')
ms02AgeFiles
origAgeFiles = list.files(path="original_ginppit_failures2")
origAgeFiles
origAgeFiles = list.files(path="original_ginppit_failures2")
origAgeFiles
ms02AgeFiles = list.files(path='ms02.gindip.failures/1/popages', pattern='2000')
ms02AgeFiles
tb.ori = read.csv("original_ginppit_failures2/cutoff.4.p.0.6.lambda.0.01.popsize.2000.time.2014Mar20_114812.txt")
tb.ori = read.csv("original_ginppit_failures2/cutoff.4.p.0.6.lambda.0.01.popsize.2000.time.2014Mar20_114812.txt")
tb.ms02 = read.csv("ms02.gindip.failures/1/popages/cutoff.4.p.0.6.lambda.0.01.popsize.2000.time.2014Mar18_190327.txt")
summary(tb.ori)
summary(tb.ms02)
s.ori = calculate.s(tb.ori[,1])
s.ms02 = calculate.s(tb.ms02[,1])
ks.test( tb.ori[,1], tb.ms02[,1])
wilcox.test( tb.ori[,1], c(tb.ms02[,1],tb.ms02[,1], tb.ms02[,1], tb.ms02[,1]))
#First, plot of original network survival curve
plot( s.ori$s ~ s.ori$t, type='l',col='blue' )
lines( s.ms02$s ~ s.ms02$t, col='red')
#First, plot of original network survival curve
plot( s.ori$s ~ s.ori$t, type='l',col='blue' )
lines( s.ms02$s ~ s.ms02$t, col='red')
plot( s.ori$s ~ s.ori$t, type='l',col='blue', log='x' )
lines( s.ms02$s ~ s.ms02$t, col='red')
#fitting Gompertz and Weibull
ori.gomp = flexsurvreg(formula = Surv(tb.ori[1:500,1]) ~ 1, dist = 'gompertz') ### Use the flexsurvreg package to fit lifespan data to gompertz or weibull distribution
ms02.gomp = flexsurvreg(formula = Surv(tb.ms02[1:500,1]) ~ 1, dist = 'gompertz') ### Use the flexsurvreg package to fit lifespan data to gompertz or weibull distribution
ori.weibull = flexsurvreg(formula = Surv(tb.ori[1:500,1]) ~ 1, dist = 'weibull') ### Use the flexsurvreg package to fit lifespan data to gompertz or weibull distribution
ms02.weibull = flexsurvreg(formula = Surv(tb.ms02[1:500,1]) ~ 1, dist = 'weibull') ### Use the flexsurvreg package to fit lifespan data to gompertz or weibull distribution
c(ori.gomp$AIC, ms02.gomp$AIC, ori.weibull$AIC, ms02.weibull$AIC)
lifespan = round( tb.ori[,1], digits=1)
table(lifespan)
tb = calculate.s(lifespan)
head(tb)
tb$ds=NA; tb$dt=NA
tb$dt[1] = tb$s[1]
tb$ds[1] = 1 - tb$s[1]
tb$mortality.rate[1] = tb$ds[1] / tb$dt[1]
for( j in 2:length(tb[,1])) {
tb$ds[j] =  tb$s[j-1] - tb$s[j]
tb$dt[j] = -tb$t[j-1] + tb$t[j]
tb$mortality.rate[j] = tb$ds[j] / ( tb$s[j] * tb$dt[j])
}
plot( tb$s ~ tb$t)
plot( tb$mortality.rate ~ tb$t, typ='l' )
plot( log10(tb$mortality.rate) ~ tb$t, type='p') #linear for Gompertz, semi-log plot
plot( log10(tb$mortality.rate) ~ log10(tb$t), type='p'  ) #linear for Weibull, log-log plot
plot( log10(tb$mortality.rate) ~ tb$t, type='p') #linear for Gompertz, semi-log plot
title(datafiles[i])
plot( log10(tb$mortality.rate) ~ log10(tb$t), type='p'  ) #linear for Weibull, log-log plot
plot( log10(tb$mortality.rate) ~ tb$t, type='p') #linear for Gompertz, semi-log plot
plot( log10(tb$mortality.rate) ~ log10(tb$t), type='p'  ) #linear for Weibull, log-log plot
plot( log10(tb$mortality.rate) ~ tb$t, type='p') #linear for Gompertz, semi-log plot
plot( log10(tb$mortality.rate) ~ log10(tb$t), type='p'  ) #linear for Weibull, log-log plot
plot( tb$mortality.rate ~ tb$t, typ='l' )
plot( tb$s ~ tb$t)
plot( tb$mortality.rate ~ tb$t, typ='l' )
plot( tb$mortality.rate ~ tb$t, typ='l', log='y' )
plot( log10(tb$mortality.rate) ~ tb$t, type='p') #linear for Gompertz, semi-log plot
plot( tb$mortality.rate ~ tb$t, typ='l', log='y' )
plot( log10(tb$mortality.rate) ~ tb$t, type='l') #linear for Gompertz, semi-log plot
head(tb)
tb = calculate.s(lifespan)
tb
calculate.mortality.rate = function( lifespan ){
tb = calculate.s(lifespan)
tb$ds=NA; tb$dt=NA
#first point
tb$dt[1] = tb$s[1]
tb$ds[1] = 1 - tb$s[1]
tb$mortality.rate[1] = tb$ds[1] / tb$dt[1]
for( j in 2:length(tb[,1])) {
tb$ds[j] =  tb$s[j-1] - tb$s[j]
tb$dt[j] = -tb$t[j-1] + tb$t[j]
tb$mortality.rate[j] = tb$ds[j] / ( tb$s[j] * tb$dt[j])
}
}//end of calculate.mortality.rate()
#calculate mortality rate
calculate.mortality.rate = function( lifespan ){
tb = calculate.s(lifespan)
tb$ds=NA; tb$dt=NA
#first point
tb$dt[1] = tb$s[1]
tb$ds[1] = 1 - tb$s[1]
tb$mortality.rate[1] = tb$ds[1] / tb$dt[1]
for( j in 2:length(tb[,1])) {
tb$ds[j] =  tb$s[j-1] - tb$s[j]
tb$dt[j] = -tb$t[j-1] + tb$t[j]
tb$mortality.rate[j] = tb$ds[j] / ( tb$s[j] * tb$dt[j])
}
} #end of calculate.mortality.rate()
calculate.mortality.rate = function( lifespan ){
tb = calculate.s(lifespan)
tb$ds=NA; tb$dt=NA
#first point
tb$dt[1] = tb$s[1]
tb$ds[1] = 1 - tb$s[1]
tb$mortality.rate[1] = tb$ds[1] / tb$dt[1]
for( j in 2:length(tb[,1])) {
tb$ds[j] =  tb$s[j-1] - tb$s[j]
tb$dt[j] = -tb$t[j-1] + tb$t[j]
tb$mortality.rate[j] = tb$ds[j] / ( tb$s[j] * tb$dt[j])
}
return(tb)
} #end of calculate.mortality.rate()
lifespan
x = calculate.mortality.rate(lifespan)
head(x)
#calculate mortality rate
calculate.mortality.rate = function( lifespan ){
tb = calculate.s(lifespan)
tb$ds=NA; tb$dt=NA
#first point
tb$dt[1] = tb$t[1]
tb$ds[1] = 1 - tb$s[1]
tb$mortality.rate[1] = tb$ds[1] / tb$dt[1]
for( j in 2:length(tb[,1])) {
tb$ds[j] =  tb$s[j-1] - tb$s[j]
tb$dt[j] = -tb$t[j-1] + tb$t[j]
tb$mortality.rate[j] = tb$ds[j] / ( tb$s[j] * tb$dt[j])
}
return(tb)
} #end of calculate.mortality.rate()
x = calculate.mortality.rate(lifespan)
x
head(x)
#calculate mortality rate
calculate.mortality.rate = function( lifespan ){
tb = calculate.s(lifespan)
tb$ds=NA; tb$dt=NA
#first point
tb$dt[1] = tb$t[2]
tb$ds[1] = 1 - tb$s[1]
tb$mortality.rate[1] = tb$ds[1] / tb$dt[1]
for( j in 2:length(tb[,1])) {
tb$ds[j] =  tb$s[j-1] - tb$s[j]
tb$dt[j] = -tb$t[j-1] + tb$t[j]
tb$mortality.rate[j] = tb$ds[j] / ( tb$s[j] * tb$dt[j])
}
return(tb)
} #end of calculate.mortality.rate()
x = calculate.mortality.rate(lifespan)
View(x)
tb = calculate.mortality.rate(lifespan)
head(tb)
plot( tb$mortality.rate ~ tb$t, typ='l', log='y' )
