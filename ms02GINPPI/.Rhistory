sim       = t( c(NA,     NA,   NA,       NA,       NA,        NA,  NA,   NA,      NA))
sim = data.frame(sim)
names(sim) = sim_names
################################## network simulations
# for debug, lambda = 1/10
# lambda = 1/35; p=0.9
for(lambda in lambda_v) {
# p=0.9, #for debug
for( p in p_v) {
popSize = 30 #too small pop size and too small p can lead to very few living individuals
popAges = numeric(popSize)
time1 = date()
j=1; count = 0;
while ((j <= popSize) && ( count < popSize*100)) {
count = count + 1;
runningORFs = GooddEssentialORFsPPI
#I could add stochasticity into pairs here.
pairs$active = runif(length(pairs[,1]))
# tmp = pairs$active > 1-p
# table(tmp) / length(tmp)  ; #double-check, very good.
ModuleTb = data.frame(runningORFs)
pairs$age = rexp( length(pairs[,1]), rate=lambda )  #exponential ages for pairs
pairs$age = ifelse(pairs$active > (1-p), pairs$age, NA )
#loop every essential genes to identify the module age
for (i in 1:length(runningORFs)) {
myORF = runningORFs[i]
pos1 = grep(myORF, pairs$ORF1)
pos2 = grep(myORF, pairs$ORF2)
if( length( c(pos1,pos2))>=1 ) {
ModuleTb$age.m[i] = max( pairs$age[c(pos1,pos2)], na.rm=T )   #maximal intxn age -> module age
} else {
ModuleTb$age.m[i] = NA;
}
}
#head(ModuleTb);
summary(ModuleTb)
ModuleTb$age.m[ ModuleTb$age.m== -Inf] = 0; #dead births occur when links are not active
currentNetworkAge = min(ModuleTb$age.m)
if (currentNetworkAge > 0) {
popAges[j] = currentNetworkAge
j = j+1
}
}# end of j while-loop, population loop
time2 = date()
hist(popAges)
summary(popAges)
popAges = popAges[popAges>0]; #remove dead-births, which can occur when p is low
#time1; time2;
#s.tb = calculate.s ( popAges )
#plot( s.tb$s ~ s.tb$t )
#plot( s.tb$s ~ s.tb$t, type='l', log='x' )
lifespanGomp = flexsurvreg(formula = Surv(popAges) ~ 1, dist = 'gompertz') ### Use the flexsurvreg package to fit lifespan data to gompertz or weibull distribution
lifespanWeib = flexsurvreg(formula = Surv(popAges) ~ 1, dist = 'weibull')
c(lifespanWeib$AIC, lifespanGomp$AIC, lifespanWeib$AIC - lifespanGomp$AIC )
sOject = Surv(popAges)
timestamp = format(Sys.time(), "%Y%b%d_%H%M%S")
age.file.name=paste("cutoff", degreeCutoff, "p", p, "lambda", lambda, "time", timestamp, "txt", sep="." )
write.csv( popAges, paste("simulated.ages/",age.file.name, sep=""), row.names=F)
#sim_names = c( "cutoff","p", "lambda", "meanLS", "medianLS", "R","G", "GompAIC", "WeibAIC")
sim = rbind(sim, c( degreeCutoff, p, lambda, mean(popAges), median(popAges),
lifespanGomp$res[2,1], lifespanGomp$res[1,1], lifespanGomp$AIC, lifespanWeib$AIC))
} # end of p-loop
timestamp = format(Sys.time(), "%Y%b%d_%H%M%S")
write.csv(sim, file= paste(currentwkdir, "sce_sim_", timestamp, ".csv", sep=""), row.names=F)
} #end of lambda loop
write.csv(sim, file="sceGINPPIaging_sim_2013121_end.csv", row.names=F)
#quite('yes')
sim
lambda_v
lambda_v = 1/c(27, 27*3)
p=0.9
lambda=1/27
popSize = 100 #too small pop size and too small p can lead to very few living individuals
popAges = numeric(popSize)
time1 = date()
j=1; count = 0;
j
while ((j <= popSize) && ( count < popSize*100)) {
count = count + 1;
runningORFs = GooddEssentialORFsPPI
#I could add stochasticity into pairs here.
pairs$active = runif(length(pairs[,1]))
# tmp = pairs$active > 1-p
# table(tmp) / length(tmp)  ; #double-check, very good.
ModuleTb = data.frame(runningORFs)
pairs$age = rexp( length(pairs[,1]), rate=lambda )  #exponential ages for pairs
pairs$age = ifelse(pairs$active > (1-p), pairs$age, NA )
#loop every essential genes to identify the module age
for (i in 1:length(runningORFs)) {
myORF = runningORFs[i]
pos1 = grep(myORF, pairs$ORF1)
pos2 = grep(myORF, pairs$ORF2)
if( length( c(pos1,pos2))>=1 ) {
ModuleTb$age.m[i] = max( pairs$age[c(pos1,pos2)], na.rm=T )   #maximal intxn age -> module age
} else {
ModuleTb$age.m[i] = NA;
}
}
#head(ModuleTb);
summary(ModuleTb)
ModuleTb$age.m[ ModuleTb$age.m== -Inf] = 0; #dead births occur when links are not active
currentNetworkAge = min(ModuleTb$age.m)
if (currentNetworkAge > 0) {
popAges[j] = currentNetworkAge
j = j+1
}
}# end of j while-loop, population loop
currentNetworkAge
count = count + 1;
runningORFs = GooddEssentialORFsPPI
runningORFs
ModuleTb = data.frame(runningORFs)
pairs$age = rexp( length(pairs[,1]), rate=lambda )  #exponential ages for pairs
pairs$age = ifelse(pairs$active > (1-p), pairs$age, NA )
summary(ModuleTb)
summary(pairs$age)
p
runningORFs
i=1
myORF = runningORFs[i]
pos1 = grep(myORF, pairs$ORF1)
pos2 = grep(myORF, pairs$ORF2)
myORF = runningORFs[i]
pos1 = grep(myORF, pairs$id1)
pos2 = grep(myORF, pairs$id22)
#loop every essential genes to identify the module age
for (i in 1:length(runningORFs)) {
myORF = runningORFs[i]
pos1 = grep(myORF, pairs$id1)
pos2 = grep(myORF, pairs$id2)  #id1,2 to ORF1,2 is a really bad choice.
if( length( c(pos1,pos2))>=1 ) {
ModuleTb$age.m[i] = max( pairs$age[c(pos1,pos2)], na.rm=T )   #maximal intxn age -> module age
} else {
ModuleTb$age.m[i] = NA;
}
}
#head(ModuleTb);
summary(ModuleTb)
summary(ModuleTb)
ModuleTb$age.m[ ModuleTb$age.m== -Inf] = 0; #dead births occur when links are not active
currentNetworkAge = min(ModuleTb$age.m)
# 2013 Dec 20, merge DIP PPI and Genetic Inxt Net -> Multi-net approach
rm(list=ls())
require('flexsurv')
source("/Users/hongqin/lib/R/lifespan.r")
#source("lifespan.r")
#setwd("~/projects/0.network.aging.prj/0.ppi.reliability.simulation")
list.files(path='data', )
#setwd("~/projects/0.network.aging.prj/0.ppi.reliability.simulation")
list.files(path='../data', )
debug = 0;
#essential gene info
essenTb = read.csv('SummaryRegressionHetHom2013Oct29.csv', colClasses=rep('character', 9))
currentwkdir = 'dipgin.ms02.output/1/'
currentmsfile = paste( 'dipgin.ms02.output/1/', 'ms02_1.tab',sep='' )
pairs = read.table(currentmsfile, sep ='\t', header=T, colClass=c('character','character',NA))
pairs2 = pairs[ pairs$id1 != pairs$id2, ]
#permuate merged yeast PPI+GIN
#2014 Feb 12, re-name function to ms02_singlerun
#2014 Jan 31, fixed a bug that inserted "NA" into new network. The bug seems to be caused by spliting the
# arrays. I rewrote the spliting portion.
#require(igraph)
rm(list=ls())
debug = 0
setwd("~/projects/0.ginppi.reliability.simulation/ms02GINPPI")
#set.seed(2014)
small2big = function( IN ){
if (IN[1] > IN[2]){ return (as.vector((IN[2], IN[1]) )
} else { return(IN);
}
small2big(c('b','a'))
## todo : convert chars to numb for resampling
ms02_singlerun_v2 = function( inpairs,  ncycles=10, indebug=0 ) { # Renamed, 2014 Feb 12
if (ncycles >= 1 ) {
if(indebug>0) {
print(paste('ncycles=', ncycles))
}
longids = c(as.character(inpairs[,1]), as.character(inpairs[,2]) )
longids = sample(longids)
len = length(inpairs[,1])
newpairs2 = data.frame( cbind( longids[1:len], longids[(len+1): (2*len)]) )
newpairs2 = t(apply(newpairs, 1, sort))
newpairs2 = data.frame(newpairs2)
names(newpairs2) = c('id1', 'id2')
newpairs2$id1 = as.character( newpairs2$id1)
newpairs2$id2 = as.character( newpairs2$id2)
newpairs2$tag =  paste(newpairs2[,1], newpairs2[,2], sep="_")
counts = table( newpairs2$tag )
newpairs2$tag_counts = counts[newpairs2$tag]
newpairs2$selfpairs = ifelse( newpairs2$id1 == newpairs2$id2, 1, 0 )
redo.tb = newpairs2[ newpairs2$selfpairs==1 | newpairs2$tag_counts>1, ]
rest.tb = newpairs2[ newpairs2$selfpairs==0 & newpairs2$tag_counts==1, ]
if(indebug>0) {
print(paste("===redopairs===="),NULL)
print(redo.tb)
print(paste("================="),NULL)
print(paste("===restpairs===="),NULL)
print(rest.tb)
print(paste("================="),NULL)
}
if( length(redo.tb[,1])>=1 ) {
if ( ncycles == 0) {
#return (c(NA,NA, NA) );
print(paste("ncycles reached zero, ncycles"),ncycles)
print(paste("Abort!"),NULL)
stop;
} else {
ncycles = ncycles - 1
splitPos = round( length(redo.tb[,1]) * sqrt(ncycles) ) + 5
splitPos = min( splitPos, (length(rest.tb[,1])-1 ) )
selectedpairs = rbind(redo.tb,  rest.tb[1: splitPos, ] )   #20140408, potential bug. always take initial section
unchangedpairs = rest.tb[ (splitPos + 1): length(rest.tb[,1]), ] #20140408, potential bug.
#return( rbind(restpairs, permute.pairs.wo.selfpairs(selectedpairs, ncycles)))
return( rbind(unchangedpairs, ms02_singlerun_v2(selectedpairs, ncycles)))  #2014 Feb 12
}
} else {
return (newpairs)
}
} else {
return( c(NA,NA,NA ))
}
}#end of ms02 v2
x = ms02_singlerun_v2( inpairs, indebug=1 )
#permute.pairs.wo.selfpairs = function( inpairs,  ncycles=10, debug=1 ) {
ms02_singlerun = function( inpairs,  ncycles=10, indebug=0 ) { # Renamed, 2014 Feb 12
#20150607
print("Do not use this version of ms02_singlerun!"); return(NA,NA,NA,NA)
if (ncycles >= 1 ) {
if(indebug>0) {
print(paste('ncycles=', ncycles))
}
longids = c(as.character(inpairs[,1]), as.character(inpairs[,2]) )
longids = sample(longids)
len = length(inpairs[,1])
newpairs = data.frame( cbind( longids[1:len], longids[(len+1): (2*len)]) )
names(newpairs) = c('id1', 'id2')
newpairs$id1 = as.character( newpairs$id1)
newpairs$id2 = as.character( newpairs$id2)
newpairs$selfpairs = ifelse( newpairs$id1 == newpairs$id2, 1, 0 )
self.tb = newpairs[ newpairs$selfpairs==1, ]
nonself.tb = newpairs[newpairs$selfpairs==0, ]
if(indebug>0) {
print(paste("===selfpairs===="),NULL)
print(self.tb)
print(paste("================="),NULL)
}
if( length(self.tb[,1])>=1 ) {
if ( ncycles == 0) {
#return (c(NA,NA, NA) );
print(paste("ncycles reached zero, ncycles"),ncycles)
print(paste("Abort!"),NULL)
stop;
} else {
ncycles = ncycles - 1
splitPos = round( length(self.tb[,1]) * sqrt(ncycles) ) + 5  #2014Jan31 change
splitPos = min( splitPos, (length(nonself.tb[,1])-1 ) )
selectedpairs = rbind(self.tb,  nonself.tb[1: splitPos, ] )
restpairs = nonself.tb[ (splitPos + 1): length(nonself.tb[,1]), ]
#return( rbind(restpairs, permute.pairs.wo.selfpairs(selectedpairs, ncycles)))
return( rbind(restpairs, ms02_singlerun(selectedpairs, ncycles)))  #2014 Feb 12
}
} else {
return (newpairs)
}
} else {
return( c(NA,NA,NA ))
}
}
# net = read.table("repeat.tab")
#write.table(pairs, "merged_PPIGIN_2014Jan20.tab", quote=F, row.names=F, col.names=F, sep='\t')
net = read.table( "merged_PPIGIN_2014Jan20.tab", header=F, sep="\t", colClass = c("character", "character") )
head(net)
if(debug==9) {
#net = read.table('pair.tab',header=F)
net = net[1:90000,]
}
for( i in 1:100) {
net.ms02 = ms02_singlerun_v2( net, indebug=0 )
cmnd = paste( "mkdir dipgin.ms02.output.v2/", i, sep="")
system( cmnd )
outputname = paste( 'dipgin.ms02.output.v2/', i, '/', "ms02_",i,".tab", sep="")
write.table(net.ms02, outputname, quote=F, row.names=F, sep="\t")  #2014Feb 17
}
#do they have the same degree?
#t1 = table(c(net[,1],net[,2]))
#t2 = table(c(net.ms02[,1],net.ms02[,2]))
#comp <- t1 == t2
#table(comp)
#tf = comp[comp==F]; tf
#t1[names(tf)[1]]
#t1[names(tf)]
#t2[names(tf)]
#permuate merged yeast PPI+GIN
#2014 Feb 12, re-name function to ms02_singlerun
#2014 Jan 31, fixed a bug that inserted "NA" into new network. The bug seems to be caused by spliting the
# arrays. I rewrote the spliting portion.
#require(igraph)
rm(list=ls())
debug = 0
setwd("~/projects/0.ginppi.reliability.simulation/ms02GINPPI")
#set.seed(2014)
small2big = function( IN ){
if (IN[1] > IN[2]){ return (as.vector((IN[2], IN[1]) )
} else { return(IN);
}
small2big(c('b','a'))
small2big = function( IN ){
if (IN[1] > IN[2]){ return (as.vector(c(IN[2], IN[1]) )
} else { return(IN);
}
small2big(c('b','a'))
small2big = function( IN ){
if (IN[1] > IN[2]){ return (as.vector( c(IN[2], IN[1]) ))
} else { return(IN);
}
small2big = function( IN ){
if (IN[1] > IN[2]){ return (as.vector( c(IN[2], IN[1]) ))
} else { return(IN);
}
}
small2big(c('b','a'))
}
small2big = function( IN ){
if (IN[1] > IN[2]){ return (as.vector( c(IN[2], IN[1]) ))
} else { return(IN);
}
}
small2big(c('b','a'))
ms02_singlerun_v2 = function( inpairs,  ncycles=10, indebug=0 ) { # Renamed, 2014 Feb 12
if (ncycles >= 1 ) {
if(indebug>0) {
print(paste('ncycles=', ncycles))
}
longids = c(as.character(inpairs[,1]), as.character(inpairs[,2]) )
longids = sample(longids)
len = length(inpairs[,1])
newpairs2 = data.frame( cbind( longids[1:len], longids[(len+1): (2*len)]) )
newpairs2 = t(apply(newpairs, 1, sort))
newpairs2 = data.frame(newpairs2)
names(newpairs2) = c('id1', 'id2')
newpairs2$id1 = as.character( newpairs2$id1)
newpairs2$id2 = as.character( newpairs2$id2)
newpairs2$tag =  paste(newpairs2[,1], newpairs2[,2], sep="_")
counts = table( newpairs2$tag )
newpairs2$tag_counts = counts[newpairs2$tag]
newpairs2$selfpairs = ifelse( newpairs2$id1 == newpairs2$id2, 1, 0 )
redo.tb = newpairs2[ newpairs2$selfpairs==1 | newpairs2$tag_counts>1, ]
rest.tb = newpairs2[ newpairs2$selfpairs==0 & newpairs2$tag_counts==1, ]
if(indebug>0) {
print(paste("===redopairs===="),NULL)
print(redo.tb)
print(paste("================="),NULL)
print(paste("===restpairs===="),NULL)
print(rest.tb)
print(paste("================="),NULL)
}
if( length(redo.tb[,1])>=1 ) {
if ( ncycles == 0) {
#return (c(NA,NA, NA) );
print(paste("ncycles reached zero, ncycles"),ncycles)
print(paste("Abort!"),NULL)
stop;
} else {
ncycles = ncycles - 1
splitPos = round( length(redo.tb[,1]) * sqrt(ncycles) ) + 5
splitPos = min( splitPos, (length(rest.tb[,1])-1 ) )
selectedpairs = rbind(redo.tb,  rest.tb[1: splitPos, ] )   #20140408, potential bug. always take initial section
unchangedpairs = rest.tb[ (splitPos + 1): length(rest.tb[,1]), ] #20140408, potential bug.
#return( rbind(restpairs, permute.pairs.wo.selfpairs(selectedpairs, ncycles)))
return( rbind(unchangedpairs, ms02_singlerun_v2(selectedpairs, ncycles)))  #2014 Feb 12
}
} else {
return (newpairs)
}
} else {
return( c(NA,NA,NA ))
}
}#end of ms02 v2
x = ms02_singlerun_v2( inpairs, indebug=1 )
#permute.pairs.wo.selfpairs = function( inpairs,  ncycles=10, debug=1 ) {
ms02_singlerun = function( inpairs,  ncycles=10, indebug=0 ) { # Renamed, 2014 Feb 12
#20150607
print("Do not use this version of ms02_singlerun!"); return(NA,NA,NA,NA)
if (ncycles >= 1 ) {
if(indebug>0) {
print(paste('ncycles=', ncycles))
}
longids = c(as.character(inpairs[,1]), as.character(inpairs[,2]) )
longids = sample(longids)
len = length(inpairs[,1])
newpairs = data.frame( cbind( longids[1:len], longids[(len+1): (2*len)]) )
names(newpairs) = c('id1', 'id2')
newpairs$id1 = as.character( newpairs$id1)
newpairs$id2 = as.character( newpairs$id2)
newpairs$selfpairs = ifelse( newpairs$id1 == newpairs$id2, 1, 0 )
self.tb = newpairs[ newpairs$selfpairs==1, ]
nonself.tb = newpairs[newpairs$selfpairs==0, ]
if(indebug>0) {
print(paste("===selfpairs===="),NULL)
print(self.tb)
print(paste("================="),NULL)
}
if( length(self.tb[,1])>=1 ) {
if ( ncycles == 0) {
#return (c(NA,NA, NA) );
print(paste("ncycles reached zero, ncycles"),ncycles)
print(paste("Abort!"),NULL)
stop;
} else {
ncycles = ncycles - 1
splitPos = round( length(self.tb[,1]) * sqrt(ncycles) ) + 5  #2014Jan31 change
splitPos = min( splitPos, (length(nonself.tb[,1])-1 ) )
selectedpairs = rbind(self.tb,  nonself.tb[1: splitPos, ] )
restpairs = nonself.tb[ (splitPos + 1): length(nonself.tb[,1]), ]
#return( rbind(restpairs, permute.pairs.wo.selfpairs(selectedpairs, ncycles)))
return( rbind(restpairs, ms02_singlerun(selectedpairs, ncycles)))  #2014 Feb 12
}
} else {
return (newpairs)
}
} else {
return( c(NA,NA,NA ))
}
}
# net = read.table("repeat.tab")
#write.table(pairs, "merged_PPIGIN_2014Jan20.tab", quote=F, row.names=F, col.names=F, sep='\t')
net = read.table( "merged_PPIGIN_2014Jan20.tab", header=F, sep="\t", colClass = c("character", "character") )
head(net)
if(debug==9) {
#net = read.table('pair.tab',header=F)
net = net[1:90000,]
}
for( i in 1:100) {
net.ms02 = ms02_singlerun_v2( net, indebug=0 )
cmnd = paste( "mkdir dipgin.ms02.output.v2/", i, sep="")
system( cmnd )
outputname = paste( 'dipgin.ms02.output.v2/', i, '/', "ms02_",i,".tab", sep="")
write.table(net.ms02, outputname, quote=F, row.names=F, sep="\t")  #2014Feb 17
}
#do they have the same degree?
#t1 = table(c(net[,1],net[,2]))
#t2 = table(c(net.ms02[,1],net.ms02[,2]))
#comp <- t1 == t2
#table(comp)
#tf = comp[comp==F]; tf
#t1[names(tf)[1]]
#t1[names(tf)]
#t2[names(tf)]
#write.table(pairs, "merged_PPIGIN_2014Jan20.tab", quote=F, row.names=F, col.names=F, sep='\t')
net = read.table( "merged_PPIGIN_2014Jan20.tab", header=F, sep="\t", colClass = c("character", "character") )
head(net)
if(debug==9) {
#net = read.table('pair.tab',header=F)
net = net[1:90000,]
}
net.ms02 = ms02_singlerun_v2( net, indebug=0 )
?net
net = read.table( "merged_PPIGIN_2014Jan20.tab", header=F, sep="\t", colClass = c("character", "character") )
str(net)
net.ms02 = ms02_singlerun_v2( net, indebug=0 )
setwd("~/github/mactower-network-failure-simulation/ms02GINPPI")
#require(igraph)
rm(list=ls())
debug = 0
#setwd("~/projects/0.ginppi.reliability.simulation/ms02GINPPI")
setwd("~/github/mactower-network-failure-simulation/ms02GINPPI")
#set.seed(2014)
source('network.r')
#net = read.table("repeat.tab")
#write.table(pairs, "merged_PPIGIN_2014Jan20.tab", quote=F, row.names=F, col.names=F, sep='\t')
net = read.table( "merged_PPIGIN_2014Jan20.tab", header=F, sep="\t", colClass = c("character", "character") )
head(net)
if(debug==9) {
#net = read.table('pair.tab',header=F)
net = net[1:90000,]
}
#2014 April 9. Rerun using 2014 April 9 version 'network.r' with correct ms02 function.
#permuate merged yeast PPI+GIN
#2014 Feb 12, re-name function to ms02_singlerun
#2014 Jan 31, fixed a bug that inserted "NA" into new network. The bug seems to be caused by spliting the
# arrays. I rewrote the spliting portion.
#require(igraph)
rm(list=ls())
debug = 0
#setwd("~/projects/0.ginppi.reliability.simulation/ms02GINPPI")
setwd("~/github/mactower-network-failure-simulation/ms02GINPPI")
#set.seed(2014)
source('network.r')
#net = read.table("repeat.tab")
#write.table(pairs, "merged_PPIGIN_2014Jan20.tab", quote=F, row.names=F, col.names=F, sep='\t')
net = read.table( "merged_PPIGIN_2014Jan20.tab", header=F, sep="\t", colClass = c("character", "character") )
head(net)
if(debug==9) {
#net = read.table('pair.tab',header=F)
net = net[1:90000,]
}
for( i in 100:105) {
net.ms02 = ms02_singlerun( net, indebug=0 )
cmnd = paste( "mkdir dipgin.ms02.output/", i, sep="")
system( cmnd )
outputname = paste( 'dipgin.ms02.output/', i, '/', "ms02_",i,".tab", sep="")
write.table(net.ms02, outputname, quote=F, row.names=F, sep="\t")  #2014Feb 17
}
<<<<<<< HEAD
#do they have the same degree?
#t1 = table(c(net[,1],net[,2]))
#t2 = table(c(net.ms02[,1],net.ms02[,2]))
#comp <- t1 == t2
#table(comp)
#tf = comp[comp==F]; tf
#t1[names(tf)[1]]
#t1[names(tf)]
#t2[names(tf)]
=======
# 2014 Feb 17, change name "20131221.DIPandGIN.sim.aging_v2.R" to "net-aging-sim-2014Feb17.R"
# 2013 Dec 20, merge DIP PPI and Genetic Inxt Net -> Multi-net approach
rm(list=ls())
require('flexsurv')
#source("/Users/hongqin/lib/R/lifespan.r")
source("lifespan.r")
source("network.r")
#setwd("~/projects/0.network.aging.prj/0.ppi.reliability.simulation")
list.files(path='data', )
setwd("~/projects/0.ginppi.reliability.simulation/ms02GINPPI")
debug = 0;
#essential gene info
essenTb = read.csv('SummaryRegressionHetHom2013Oct29.csv', colClasses=rep('character', 9))
# remove self-intxns
#for ( i in 1:100) #
#for( i in 3:100 ){ #20140410
for( i in 81:100 ){ #20141205
path = paste('dipgin.ms02.output/', i, sep='')
ms02file = paste('ms02_', i, ".tab", sep='')
infile = paste( path, '/', ms02file, sep=""); print(infile)
pairs = read.table( infile, header=T, sep="\t", colClass = c("character", "character", NA) )
print(head(pairs))
if(debug==9) {     pairs = pairs[1:1000,]  }
pairs = pairs[ pairs$id1 != pairs$id2, ]
# How do the two data set overlap? DIP seems to contain some questionable orfs
uniq.orf.from.pairs = unique(c(pairs$id1, pairs$id2)) #5496 ORF
matches = uniq.orf.from.pairs %in% unique(essenTb$orf)
table(matches)
#unmatchedORF = uniq.orf.from.pairs[! matches]
#matches = uniq.orf.from.pairs %in% unique(essenTb$orf[essenTb$essenflag=='essential'])
#table(matches)
#matches = uniq.orf.from.pairs %in% unique(essenTb$orf[essenTb$essenflag=='nonessential'])
#table(matches)
#remove unmatched orfs from pairs
#pairs$Removeflag = ifelse( pairs$id1 %in%unmatchedORF | pairs$id2 %in%unmatchedORF, T,F   )
#table(pairs$Removeflag)
#pairs = pairs[! pairs$Removeflag, ]
#table(pairs$Removeflag)
#pairs = pairs[,1:2]  ##This set of pairs is read for analysis
# label essential nodes, remove nonesse-nonessen pairs
essentialORFs = essenTb$orf[essenTb$essenflag=='essential']
pairs$essen1 = pairs$id1 %in% essentialORFs
pairs$essen2 = pairs$id2 %in% essentialORFs
#remove nonessen <-> nonessen intxn because they do not affect aging.
pairs$remove = ifelse( pairs$essen1==F & pairs$essen2==F, T, F  )
pairs= pairs[! pairs$remove, ]
# 34052 for one ms02 network
#how many essen <--> essen intxn?
pairs$inxnEE = pairs$essen1 & pairs$essen2
table(pairs$inxnEE)
#How many essen genes?
tmp = essentialORFs %in% unique(c(pairs$id1, pairs$id2))
table(tmp)
essentialORFsPPI = essentialORFs[tmp] #?????
#get connectivities per node
degreeTb = data.frame( table(c(pairs[,1], pairs[,2])))
summary(degreeTb)
#median degree =5, mean=12
#for one ms02, media =6, mean=13.68, so orginal network is power-law like, skew at two ends.
degreeTb$ORF = as.character( degreeTb[,1])
#hist(log2(degreeTb$Freq), breaks=30)
degreeCutoff = 4; #######!!!!!! degree=5 is the median
tmp = essentialORFsPPI %in% degreeTb$ORF[degreeTb$Freq>degreeCutoff]
GooddEssentialORFsPPI = essentialORFsPPI[tmp]
if(debug >= 5){GooddEssentialORFsPPI = GooddEssentialORFsPPI[1:100]  }
lambda_v = 1/c(100, 50 ) #2014Feb 25, fix double inverse bug in lambda
p_v = seq(0.6, 1.0, by=0.2)  ; #the chance that each gene interaction is active at t=0
sim_names = c( "degreeCutoff","p", "lambda", "meanLS", "medianLS", "R","G", "GompAIC", "WeibAIC")
sim       = t( c(NA,     NA,   NA,       NA,       NA,        NA,  NA,   NA,      NA))
sim = data.frame(sim)
names(sim) = sim_names
full_age_dir = paste(path, '/', 'popages', sep='')
system(paste('mkdir ', full_age_dir ))
for(lambda in lambda_v) {
for( p in p_v) {  # p=0.9, #for debug
#popSize = 500 #too small pop size and too small p can lead to very few living individuals
popSize = 2000 #20140317 Monday
popAges = numeric(popSize)
time1 = date()
j=1; count = 0;
while ((j <= popSize) && ( count < popSize*30)) {
count = count + 1;
print(paste("count=",count))
currentNetworkAge = single_network_failure(lambda, p, pairs, GooddEssentialORFsPPI)
#single_network_failure = function(lambda, p, pairs, runningORFs) {
if (currentNetworkAge > 0) {
popAges[j] = currentNetworkAge
j = j+1
}
}# end of j while-loop, population loop
timestamp = format(Sys.time(), "%Y%b%d_%H%M%S")
age.file.name=paste("cutoff", degreeCutoff, "p", p, "lambda", lambda, 'popsize',popSize, "time",timestamp, "txt", sep="." )
full_age_file = paste( full_age_dir,'/', age.file.name, sep='')
write.csv( popAges, full_age_file, row.names=F)
# s.tb = calculate.s ( popAges )      #plot( s.tb$s ~ s.tb$t, type='l', log='x' )
# lifespanGomp = flexsurvreg(formula = Surv(popAges) ~ 1, dist = 'gompertz') ### Use the flexsurvreg package to fit lifespan data to gompertz or weibull distribution
# lifespanWeib = flexsurvreg(formula = Surv(popAges) ~ 1, dist = 'weibull')
# c(lifespanWeib$AIC, lifespanGomp$AIC, lifespanWeib$AIC - lifespanGomp$AIC )
# sOject = Surv(popAges)
# sim_names = c( "cutoff","p", "lambda", "meanLS", "medianLS", "R","G", "GompAIC", "WeibAIC")
# sim = rbind(sim, c( degreeCutoff, p, lambda, mean(popAges), median(popAges),
#                    lifespanGomp$res[2,1], lifespanGomp$res[1,1], lifespanGomp$AIC, lifespanWeib$AIC))
} # end of p-loop
#timestamp = format(Sys.time(), "%Y%b%d_%H%M%S")
#write.csv(sim, file= paste(currentwkdir, "sce_sim_", timestamp, ".csv", sep=""), row.names=F)
} #end of lambda loop
}
>>>>>>> origin/master
