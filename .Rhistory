#loop every essential genes to identify the module age
for (i in 1:length(runningORFs)) {
myORF = runningORFs[i]
pos1 = grep(myORF, pairs$ORF1)
pos2 = grep(myORF, pairs$ORF2)
ModuleTb$age.m[i] = max( pairs$age[c(pos1,pos2)], na.rm=T )   #maximal intxn age -> module age
}
#head(ModuleTb);
summary(ModuleTb)
currentNetworkAge = min(ModuleTb$age.m)
popAges[j] = currentNetworkAge
}# end of j loop, population loop
time2 = date()
hist(popAges)
summary(popAges)
time1; time2;
source("/Users/hongqin/lib/R/lifespan.r")
s.tb = calculate.s ( popAges )
plot( s.tb$s ~ s.tb$t )
plot( s.tb$s ~ s.tb$t, type='l', log='x' )
# This is exponential, perhaps not surprisingly, because power-law elevate the role of the weakest link.
# So, if the weakest links die more slowly, maybe we can see sigmoidal shapes.
# Maybe I should remove the single-linked essential genes. In essence, assumming they die very slow.
# maybe I should also use house-keeping genes
#require(nlme)
# s = exp( (I/G) *(1 - exp(G* my.data)) )
#s = s.tb$s; t=s.tb$t;
gompertz.s = function(R,G){ exp((R/G)*(1-exp(G* t)))}
#ret.gnls = gnls( s ~ gompertz.s(R,G), start=list(R=1E-10,G=0.01)   )
#s2 = gompertz.s(1E-10, 0.01)
#plot(s2 ~ t)
# todo,
# permutation effect on aging?
# lambda ~ 1/connectivity of nodes
# I should try to normalized the survival curves for a different prespective
##### log likelihood function, simple gompertz mortality model
#s = exp( (I/G) *(1 - exp(G* my.data)) )  ;
#m = I * exp( G * my.data );
#llh.gompertz.single.run <- function( IG, lifespan ) {
#  I = IG[1]; G = IG[2];
#  my.data = lifespan[!is.na(lifespan)];
#  log_s = (I/G) *(1 - exp(G* my.data))
#  log_m = log(I) +  G * my.data ;
#  my.lh = sum(log_s)  + sum(log_m);
#  print (IG ); #trace the convergence
#  ret = -my.lh # because maximize large numbers seems to work better than minimizing very small numbers
#}
#ret.optim = optim ( par=c(1E-5, 1E-3), fn=llh.gompertz.single.run, lifespan=popAges,
#               lower=c(1E-10, 1E-10), method="L-BFGS-B" );
require('flexsurv')
lifespanGomp = flexsurvreg(formula = Surv(popAges) ~ 1, dist = 'gompertz') ### Use the flexsurvreg package to fit lifespan data to gompertz or weibull distribution
lifespanWeib = flexsurvreg(formula = Surv(popAges) ~ 1, dist = 'weibull')
c(lifespanWeib$AIC, lifespanGomp$AIC, lifespanWeib$AIC - lifespanGomp$AIC )
sOject = Surv(popAges)
#sim_names = c( "cutoff","p", "lambda", "meanLS", "medianLS", "R","G", "GompAIC", "WeibAIC")
sim = rbind(sim, c( degreeCutoff, p, lambda, mean(popAges), median(popAges),
lifespanGomp$res[1,1], lifespanGomp$res[2,1], lifespanGomp$AIC, lifespanWeib$AIC))
} # end of p-loop
} #end of lambda loop
#conditions$avgLS[r] = mean(lifespansTemp)
#conditions$medianLS[r] = median(lifespansTemp)
#conditions$gompShape[r] = lifespanGomp$res[1,1]
#conditions$gompRate[r] = lifespanGomp$res[2,1]
#conditions$gompLogLik[r] = lifespanGomp$loglik
#conditions$gompAIC[r] = lifespanGomp$AIC
#conditions$weibShape[r] = lifespanWeib$res[1,1]
#conditions$weibScale[r] = lifespanWeib$res[2,1]
#conditions$weibLogLik[r] = lifespanWeib$loglik
#conditions$weibAIC[r] = lifespanWeib$AIC
#quite('yes')
sim
lambda
p
p_v
lambda_v
popAges
lambda
p
for (i in 1:length(runningORFs)) {
myORF = runningORFs[i]
pos1 = grep(myORF, pairs$ORF1)
pos2 = grep(myORF, pairs$ORF2)
if( length( c(pos1,pos2))>=1 ) {
ModuleTb$age.m[i] = max( pairs$age[c(pos1,pos2)], na.rm=T )   #maximal intxn age -> module age
} else {
ModuleTb$age.m[i] = NA;
}
}
#head(ModuleTb);
summary(ModuleTb)
currentNetworkAge = min(ModuleTb$age.m)
popAges[j] = currentNetworkAge
currentNetworkAge
popAges
ModuleTb = data.frame(runningORFs)
pairs$age = rexp( length(pairs[,1]), rate=lambda )  #exponential ages for pairs
pairs$age = ifelse(pairs$active > (1-p), pairs$age, NA )
summary(pairs$age)
j
#loop every essential genes to identify the module age
for (i in 1:length(runningORFs)) {
myORF = runningORFs[i]
pos1 = grep(myORF, pairs$ORF1)
pos2 = grep(myORF, pairs$ORF2)
if( length( c(pos1,pos2))>=1 ) {
ModuleTb$age.m[i] = max( pairs$age[c(pos1,pos2)], na.rm=T )   #maximal intxn age -> module age
} else {
ModuleTb$age.m[i] = NA;
}
}
#head(ModuleTb);
summary(ModuleTb)
currentNetworkAge = min(ModuleTb$age.m)
popAges[j] = currentNetworkAge
}# end of j loop, population loop
#loop every essential genes to identify the module age
for (i in 1:length(runningORFs)) {
myORF = runningORFs[i]
pos1 = grep(myORF, pairs$ORF1)
pos2 = grep(myORF, pairs$ORF2)
if( length( c(pos1,pos2))>=1 ) {
ModuleTb$age.m[i] = max( pairs$age[c(pos1,pos2)], na.rm=T )   #maximal intxn age -> module age
} else {
ModuleTb$age.m[i] = NA;
}
}
#head(ModuleTb);
summary(ModuleTb)
i
i=1
myORF = runningORFs[i]
pos1 = grep(myORF, pairs$ORF1)
pos2 = grep(myORF, pairs$ORF2)
pos1
pos2
if( length( c(pos1,pos2))>=1 ) {
ModuleTb$age.m[i] = max( pairs$age[c(pos1,pos2)], na.rm=T )   #maximal intxn age -> module age
} else {
ModuleTb$age.m[i] = NA;
}
}
if( length( c(pos1,pos2))>=1 ) {
ModuleTb$age.m[i] = max( pairs$age[c(pos1,pos2)], na.rm=T )   #maximal intxn age -> module age
} else {
ModuleTb$age.m[i] = NA;
}
i
max( pairs$age[c(pos1,pos2)], na.rm=T )
View(ModuleTb)
i=90
myORF = runningORFs[i]
pos1 = grep(myORF, pairs$ORF1)
pos2 = grep(myORF, pairs$ORF2)
pos1
pos2
max( pairs$age[c(pos1,pos2)], na.rm=T )
pairs$age[c(pos1,pos2)]
ModuleTb$age.m[i] == -Inf
#loop every essential genes to identify the module age
for (i in 1:length(runningORFs)) {
myORF = runningORFs[i]
pos1 = grep(myORF, pairs$ORF1)
pos2 = grep(myORF, pairs$ORF2)
if( length( c(pos1,pos2))>=1 ) {
ModuleTb$age.m[i] = max( pairs$age[c(pos1,pos2)], na.rm=T )   #maximal intxn age -> module age
if(ModuleTb$age.m[i] == -Inf ) { ModuleTb$age.m[i] = 0 } # -Inf occur when all age are NA, ->dead births, mis-carriages
} else {
ModuleTb$age.m[i] = NA;
}
}
#head(ModuleTb);
summary(ModuleTb)
currentNetworkAge = min(ModuleTb$age.m)
popAges[j] = currentNetworkAge
}# end of j loop, population loop
time2 = date()
hist(popAges)
summary(popAges)
for (i in 1:length(runningORFs)) {
myORF = runningORFs[i]
pos1 = grep(myORF, pairs$ORF1)
pos2 = grep(myORF, pairs$ORF2)
if( length( c(pos1,pos2))>=1 ) {
ModuleTb$age.m[i] = max( pairs$age[c(pos1,pos2)], na.rm=T )   #maximal intxn age -> module age
if(ModuleTb$age.m[i] == -Inf ) { ModuleTb$age.m[i] = 0 } # -Inf occur when all age are NA, ->dead births, mis-carriages
} else {
ModuleTb$age.m[i] = NA;
}
}
#head(ModuleTb);
summary(ModuleTb)
currentNetworkAge = min(ModuleTb$age.m)
popAges[j] = currentNetworkAge
popAges
summary(ModuleTb)
for( j in 1:popSize) {
runningORFs = GooddEssentialORFsPPI
#I could add stochasticity into pairs here.
pairs$active = runif(length(pairs[,1]))
# tmp = pairs$active > 1-p
# table(tmp) / length(tmp)  ; #double-check, very good.
ModuleTb = data.frame(runningORFs)
pairs$age = rexp( length(pairs[,1]), rate=lambda )  #exponential ages for pairs
pairs$age = ifelse(pairs$active > (1-p), pairs$age, NA )
#loop every essential genes to identify the module age
for (i in 1:length(runningORFs)) {
myORF = runningORFs[i]
pos1 = grep(myORF, pairs$ORF1)
pos2 = grep(myORF, pairs$ORF2)
if( length( c(pos1,pos2))>=1 ) {
ModuleTb$age.m[i] = max( pairs$age[c(pos1,pos2)], na.rm=T )   #maximal intxn age -> module age
} else {
ModuleTb$age.m[i] = NA;
}
}
#head(ModuleTb);
summary(ModuleTb)
ModuleTb$age.m[ ModuleTb$age.m== -Inf] = 0; #dead births occur when links are not active
currentNetworkAge = min(ModuleTb$age.m)
popAges[j] = currentNetworkAge
}# end of j loop, population loop
time2 = date()
hist(popAges)
lambda
summary(popAges)
popAges = popAges[popAges>0]; #remove dead-births, which can occur when p is low
time1; time2;
time1 - time2;
time1; time2;
diff(time1, time2)
time1 - time2
# todo,
# permutation effect on aging?
# lambda ~ 1/connectivity of nodes
rm(list=ls())
require('flexsurv')
source("/Users/hongqin/lib/R/lifespan.r")
setwd("~/projects/0.network.aging.prj/0.ppi.reliability.simulation")
list.files(path='data', )
debug = 9;
#yeast PPI
pairs = read.csv('data/pairs.csv', colClasses=c('character','character'))
#this yeast ppi dataset is consistent with Taiwan group's report.
#essential gene info
essenTb = read.csv('data/SummaryRegressionHetHom2013Oct29.csv', colClasses=rep('character', 9))
#######################
# How do the two data set overlap? DIP seems to contain some questionable orfs
uniq.orf.from.pairs = unique(c(pairs$ORF1, pairs$ORF2))
matches = uniq.orf.from.pairs %in% unique(essenTb$orf)
table(matches)
#FALSE  TRUE
# 261  4217
# YDL026W dubious, YAR009C transposable element
dubiousORF = uniq.orf.from.pairs[! matches]
matches = uniq.orf.from.pairs %in% unique(essenTb$orf[essenTb$essenflag=='essential'])
table(matches)
#FALSE  TRUE
#3506   972  #this is amazingly consistent with the Taiwan group's report.
matches = uniq.orf.from.pairs %in% unique(essenTb$orf[essenTb$essenflag=='nonessential'])
table(matches)
# FALSE  TRUE
# 1287  3191  #this is amazingly consistent with Taiwan group's report.
#remove dubious orfs from PPI
pairs$Removeflag = ifelse( pairs$ORF1 %in%dubiousORF | pairs$ORF2 %in%dubiousORF, T,F   )
table(pairs$Removeflag)
#FALSE  TRUE
#12180  1487
pairs = pairs[! pairs$Removeflag, ]
table(pairs$Removeflag)
pairs = pairs[,1:2]  ##This set of pairs is read for analysis
###############################
# label essential nodes, remove nonesse-nonessen pairs
essentialORFs = essenTb$orf[essenTb$essenflag=='essential']
pairs$essen1 = pairs$ORF1 %in% essentialORFs
pairs$essen2 = pairs$ORF2 %in% essentialORFs
head(pairs)
#remove nonessen <-> nonessen intxn because they do not affect aging.
pairs$remove = ifelse( pairs$essen1==F & pairs$essen2==F, T, F  )
pairs= pairs[! pairs$remove,1:4 ]  #only 6279 intxn left
#remove self-intxn, just to make sure
pairs = pairs[ pairs$ORF1 != pairs$ORF2, ]
#how many essen <--> essen intxn?
pairs$inxnEE = pairs$essen1 & pairs$essen2
table(pairs$inxnEE)
# FALSE  TRUE
# 4521  1758
#How many essen genes?
tmp = essentialORFs %in% unique(c(pairs$ORF1, pairs$ORF2))
table(tmp)
#FALSE  TRUE
#194   958  #So, intxn among essential genes appear to be suppressed.
essentialORFsPPI = essentialORFs[tmp]
#get connectivities per node
degreeTb = data.frame( table(c(pairs[,1], pairs[,2])))
summary(degreeTb)
degreeTb$ORF = as.character( degreeTb[,1])
degreeCutoff = 4; #######!!!!!!
tmp = essentialORFsPPI %in% degreeTb$ORF[degreeTb$Freq>degreeCutoff]
GooddEssentialORFsPPI = essentialORFsPPI[tmp]
###########################
if(debug >= 5){GooddEssentialORFsPPI = GooddEssentialORFsPPI[1:100]  }
###########################
# simulate aging
# -> exponential age to all pairs
# -> maximal age for each essential gene
# -> minimal age for all essential modules
set.seed(2013)
lambda_v = 1 / 3^seq(2,5)
#lambda_v = 1 / s
#p_v = seq(0.1, 1.0, by=0.1)  ; #the chance that each gene interaction is active at t=0
p_v = c(0.5,  0.8, 0.9, 1.0)  ; #the chance that each gene interaction is active at t=0
sim_names = c( "degreeCutoff","p", "lambda", "meanLS", "medianLS", "R","G", "GompAIC", "WeibAIC")
sim       = t( c(NA,     NA,   NA,       NA,       NA,        NA,  NA,   NA,      NA))
sim = data.frame(sim)
names(sim) = sim_names
################################## network simulations
# for debug, lambda = 1/10
# lambda = 1/35; p=0.9
for(lambda in lambda_v) {
# p=0.9, #for debug
for( p in p_v) {
popSize = 30
popAges = numeric(popSize)
time1 = date()
for( j in 1:popSize) {
runningORFs = GooddEssentialORFsPPI
#I could add stochasticity into pairs here.
pairs$active = runif(length(pairs[,1]))
# tmp = pairs$active > 1-p
# table(tmp) / length(tmp)  ; #double-check, very good.
ModuleTb = data.frame(runningORFs)
pairs$age = rexp( length(pairs[,1]), rate=lambda )  #exponential ages for pairs
pairs$age = ifelse(pairs$active > (1-p), pairs$age, NA )
#loop every essential genes to identify the module age
for (i in 1:length(runningORFs)) {
myORF = runningORFs[i]
pos1 = grep(myORF, pairs$ORF1)
pos2 = grep(myORF, pairs$ORF2)
if( length( c(pos1,pos2))>=1 ) {
ModuleTb$age.m[i] = max( pairs$age[c(pos1,pos2)], na.rm=T )   #maximal intxn age -> module age
} else {
ModuleTb$age.m[i] = NA;
}
}
#head(ModuleTb);
summary(ModuleTb)
ModuleTb$age.m[ ModuleTb$age.m== -Inf] = 0; #dead births occur when links are not active
currentNetworkAge = min(ModuleTb$age.m)
popAges[j] = currentNetworkAge
}# end of j loop, population loop
time2 = date()
hist(popAges)
summary(popAges)
popAges = popAges[popAges>0]; #remove dead-births, which can occur when p is low
#time1; time2;
#s.tb = calculate.s ( popAges )
#plot( s.tb$s ~ s.tb$t )
#plot( s.tb$s ~ s.tb$t, type='l', log='x' )
lifespanGomp = flexsurvreg(formula = Surv(popAges) ~ 1, dist = 'gompertz') ### Use the flexsurvreg package to fit lifespan data to gompertz or weibull distribution
lifespanWeib = flexsurvreg(formula = Surv(popAges) ~ 1, dist = 'weibull')
c(lifespanWeib$AIC, lifespanGomp$AIC, lifespanWeib$AIC - lifespanGomp$AIC )
sOject = Surv(popAges)
#sim_names = c( "cutoff","p", "lambda", "meanLS", "medianLS", "R","G", "GompAIC", "WeibAIC")
sim = rbind(sim, c( degreeCutoff, p, lambda, mean(popAges), median(popAges),
lifespanGomp$res[1,1], lifespanGomp$res[2,1], lifespanGomp$AIC, lifespanWeib$AIC))
} # end of p-loop
} #end of lambda loop
sim
infile = "data/merged_PPIGIN_2014Jan20.tab",
pairs = read.table( infile,  header=F, sep="\t", colClass = c("character", "character") )
setwd("~/github/mactower-network-failure-simulation")
debug = 0;
#essential gene info
essenTb = read.csv('SummaryRegressionHetHom2013Oct29.csv', colClasses=rep('character', 9))
infile = "data/merged_PPIGIN_2014Jan20.tab",
pairs = read.table( infile,  header=F, sep="\t", colClass = c("character", "character") )
infile = "data/merged_PPIGIN_2014Jan20.tab";
pairs = read.table( infile,  header=F, sep="\t", colClass = c("character", "character") )
print(head(pairs))
names(pairs) = c("id1",'id2')
names(pairs) = c("id1",'id2')
print(head(pairs))
if(debug==9) {     pairs = pairs[1:1000,]  }
pairs = pairs[ pairs$id1 != pairs$id2, ]
# How do the two data set overlap? DIP seems to contain some questionable orfs
uniq.orf.from.pairs = unique(c(pairs$id1, pairs$id2)) #5496 ORF
matches = uniq.orf.from.pairs %in% unique(essenTb$orf)
table(matches)
#unmatchedORF = uniq.orf.from.pairs[! matches]
essentialORFs = essenTb$orf[essenTb$essenflag=='essential']
pairs$essen1 = pairs$id1 %in% essentialORFs
pairs$essen2 = pairs$id2 %in% essentialORFs
#remove nonessen <-> nonessen intxn because they do not affect aging.
pairs$remove = ifelse( pairs$essen1==F & pairs$essen2==F, T, F  )
pairs= pairs[! pairs$remove, ]
# 34052 for one ms02 network
#how many essen <--> essen intxn?
pairs$inxnEE = pairs$essen1 & pairs$essen2
table(pairs$inxnEE)
#How many essen genes?
tmp = essentialORFs %in% unique(c(pairs$id1, pairs$id2))
table(tmp)
essentialORFsPPI = essentialORFs[tmp] #?????
#get connectivities per node
degreeTb = data.frame( table(c(pairs[,1], pairs[,2])))
summary(degreeTb)
#median degree =5, mean=12
#for one ms02, media =6, mean=13.68, so orginal network is power-law like, skew at two ends.
degreeTb$ORF = as.character( degreeTb[,1])
degreeCutoff = 4; #######!!!!!! degree=5 is the median
tmp = essentialORFsPPI %in% degreeTb$ORF[degreeTb$Freq>degreeCutoff]
GooddEssentialORFsPPI = essentialORFsPPI[tmp]
lambda_v = 1/c(100, 50, 25 ) #2014Feb 25, fix double inverse bug in lambda
p_v = seq(0.6, 1.0, by=0.1)  ; #the chance that each gene interaction is active at t=0
sim_names = c( "degreeCutoff","p", "lambda", "meanLS", "medianLS", "R","G", "GompAIC", "WeibAIC")
sim       = t( c(NA,     NA,   NA,       NA,       NA,        NA,  NA,   NA,      NA))
sim = data.frame(sim)
names(sim) = sim_names
#2014 April 9, Hong Qin hqin@spelman.edu
#20140408 old ms02_singlerun() did not check id1-id2 versus id2-id1.
# So, I wrote v2 and wrapp the old function to v2 function call.
#permute.pairs.wo.selfpairs = function( inpairs,  ncycles=10, debug=1 ) {
ms02_singlerun = function( inpairs,  ncycles=10, indebug=0 ) { # Renamed, 2014 Feb 12
ms02_singlerun_v2 = function( inpairs,  ncycles=ncycles, indebug=indebug ) {
}
ms02_singlerun_v2 = function( inpairs,  ncycles=10, indebug=0 ) {
if (ncycles >= 1 ) {
if(indebug>0) {
print(paste('ncycles=', ncycles))
}
longids = c(as.character(inpairs[,1]), as.character(inpairs[,2]) )
longids = sample(longids)
len = length(inpairs[,1])
newpairs2 = data.frame( cbind( longids[1:len], longids[(len+1): (2*len)]) )
newpairs2 = t(apply(newpairs2, 1, sort))
newpairs2 = data.frame(newpairs2)
names(newpairs2) = c('id1', 'id2')
newpairs2$id1 = as.character( newpairs2$id1)
newpairs2$id2 = as.character( newpairs2$id2)
newpairs2$tag =  paste(newpairs2[,1], newpairs2[,2], sep="_")
counts = table( newpairs2$tag )
newpairs2$tag_counts = counts[newpairs2$tag]
newpairs2$selfpairs = ifelse( newpairs2$id1 == newpairs2$id2, 1, 0 )
redo.tb = newpairs2[ newpairs2$selfpairs==1 | newpairs2$tag_counts>1, ]
rest.tb = newpairs2[ newpairs2$selfpairs==0 & newpairs2$tag_counts==1, ]
if(indebug>0) {
print(paste("===redopairs===="),NULL);      print(redo.tb);
#print(paste("===restpairs===="),NULL);      print(rest.tb);
print(paste("================="),NULL)
}
if( length(redo.tb[,1])>=1 ) {
if ( ncycles == 0) {
#return (c(NA,NA, NA) );
print(paste("ncycles reached zero, ncycles"),ncycles)
print(paste("Abort!"),NULL)
stop;
} else {
ncycles = ncycles - 1
splitPos = round( length(redo.tb[,1]) * sqrt(ncycles) ) + 5
splitPos = min( splitPos, (length(rest.tb[,1])-1 ) )
selectedpairs = rbind(redo.tb,  rest.tb[1: splitPos, ] )   #20140408, potential bug. always take initial section
unchangedpairs = rest.tb[ (splitPos + 1): length(rest.tb[,1]), ] #20140408, potential bug.
return( rbind(unchangedpairs, ms02_singlerun_v2(selectedpairs, ncycles)))  #2014 Feb 12
}
} else {
return (newpairs2 )
}
} else {
return( c(NA,NA,NA ))
}
}#end of ms02 v2
single_network_failure = function(lambda, p, pairs, runningORFs) {
# single network failure simulation
# lambda: exponential constant failure rate for edges
# pairs: network in pairwide format
# runningORFs: GooddEssentialORFsPPI
inpairs = pairs[,1:2] #bookkeeping
names(inpairs) = c('id1','id2')
#stochasticity into pairs
inpairs$active = runif(length(inpairs[,1]))  #uniform
# tmp = pairs$active > 1-p
# table(tmp) / length(tmp)  ; #double-check, very good.
inpairs$age = rexp( length(inpairs[,1]), rate=lambda )  #exponential ages for pairs
inpairs$age = ifelse(inpairs$active > (1-p), inpairs$age, NA ) #if not active, intxn is excluded.
#pairs$age = ifelse(pairs$active > (1-p), pairs$age, 0 )  # in what situations, can non-ative intxn be treat as 0-age?
ModuleTb = data.frame(runningORFs) #buffer for module ages
#loop every essential genes to identify the module age
for (i in 1:length(runningORFs)) {
myORF = runningORFs[i]
pos1 = grep(myORF, inpairs$id1)
pos2 = grep(myORF, inpairs$id2)  #id1,2 to ORF1,2 is a really bad choice.
if( length( c(pos1,pos2))>=1 ) {
ModuleTb$age.m[i] = max( inpairs$age[c(pos1,pos2)], na.rm=T )   #maximal intxn age -> module age
} else {
ModuleTb$age.m[i] = NA;
}
}
#head(ModuleTb);
summary(ModuleTb)
ModuleTb$age.m[ ModuleTb$age.m== -Inf] = 0; #dead births occur when links are not active
currentNetworkAge = min(ModuleTb$age.m)
}
degree=4; numOfNodes=1000; outfilename = "__test.csv"
degree=4; numOfEssenNodes=1000; outNetworkFile = "__test.csv"; outEssenLookupTb="__EssenLookupTb.csv"
debug = 0;
essenLookupTb = c(rep(1,numOfEssenNodes), rep(0, numOfEssenNodes*degree))
rm(list=ls())
debug = 0;
essenLookupTb = c(rep(1,numOfEssenNodes), rep(0, numOfEssenNodes*degree))
degree=4; numOfEssenNodes=1000; outNetworkFile = "__test.csv"; outEssenLookupTb="__EssenLookupTb.csv"
essenLookupTb = c(rep(1,numOfEssenNodes), rep(0, numOfEssenNodes*degree))
table(essenLookupTb)
